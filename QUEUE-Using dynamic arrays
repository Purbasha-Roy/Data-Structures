//Using dynamic arrays
#include <iostream>
using namespace std;
class Queue{
    int *data;
    int nextindex;
    int firstindex;
    int size;
    int capacity;
    
    public:
    Queue(int s){
        data=new int[s];
        capacity=s;
        firstindex=-1;
        nextindex=0;
        size=0;
    }
    bool isEmpty(){
        return size==0;
    }
    int getSize(){
        return size;
    }
    int front(){
        if(isEmpty()){
            cout<<"Queue is empty";
            return 0;
        }
        return data[firstindex];
    }
    void enqueue(int element){
        if(size==capacity){
            int *newdata=new int[2*capacity];
            int j=0;
            for(int i=firstindex;i<capacity;i++){
                newdata[j]=data[i];
                j++;
            }
            for(int i=0;i<firstindex;i++){
                newdata[j]=data[i];
                j++;
            }
            delete [] data;
            data=newdata;
            firstindex=0;
            nextindex=capacity;
            capacity=capacity*2;
        }
        data[nextindex]=element;
        nextindex=(nextindex+1)%capacity;
        if(firstindex=-1){
            firstindex=0;
        }
        size++;
    }
    int dequeue(){
        if(isEmpty()){
            cout<<"Queue is empty";
            return 0;
        }
        int ans=data[firstindex];
        firstindex=(firstindex+1)%capacity;
        size--;
        return ans;
    }
};
int main() {
    Queue q(5);
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    q.enqueue(5);
    q.enqueue(6);
    cout<<q.front()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.isEmpty()<<endl;
    cout<<q.getSize()<<endl;
    return 0;
}
