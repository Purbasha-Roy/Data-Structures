//Implementing stack functions using templates
#include<iostream>
using namespace std;
template <typename T>
class StackUsingArrays{
    T *data;
    int nextIndex;
    int capacity;
    
    public:
    StackUsingArrays(){
        data=new T[4];
        nextIndex=0;
        capacity=4;
    }
    bool isEmpty(){
        return nextIndex==0;
    }
    int size(){
        return nextIndex;
    }
    T pop(){
        if(nextIndex==0){
            cout<<"The stack is empty"<<endl;
            return 0;
        }
        nextIndex--;
        return data[nextIndex];
    }
    T top(){
        if(nextIndex==0){
            cout<<"The stack is empty"<<endl;
            return 0;
        }
        return data[nextIndex-1];
    }
    void push(T element){
        if(nextIndex==capacity){
            T *newdata=new T[2*capacity];
            for(int i=0;i<capacity;i++){
                newdata[i]=data[i];
            }
            capacity=capacity*2;
            delete [] data;
            data=newdata;
        }
        data[nextIndex]=element;
        nextIndex++;
    }
    
};
int main(){
    StackUsingArrays <char> S;
    S.push(100);
    S.push('a');
    S.push('b');
    S.push(101);
    S.push('y');
    cout<<S.top()<<endl;
    cout<<S.pop()<<endl;
    cout<<S.pop()<<endl;
    cout<<S.size()<<endl;
    cout<<S.isEmpty()<<endl;
    return 0;
}
